* Стандарты C++ 11 и C++ 14 предоставляют основные строительные блоки для создания многопоточных и асинхронных программ.
** C++ 11 (2001)
*** Модель памяти
**** Атомарные операции - операции, выполнение которых не может быть прервано до полного их завершения
***** Aтомарные операции выполняются над данными *атомарных типов* - *атомарные переменные*
****** логические
****** символьные
****** типы указателей, включая различные их вариации
****** пользовательские атомарные типы, определяемые посредством шаблона класса ~std::atomic~
**** Частично упорядоченные операции - последовательности операций, порядок которых не должен изменяться.
**** Видимые эффекты операций - гарантия того, что результат операций над переменными, находящимися в общем доступе, будет заметен из других потоков
**** Снятие требования *временной согласованности операций* (в отличие от Java), которая заключается в том, что
***** Инструкции программы выполняются в том порядке, в котором они записаны в исходном коде.
***** Существует глобальный порядок выполнения всех операций во всех параллельных потоках.
*** Атомарные переменные
*** Потоки ~std::thread~ - шаблон класса с *переменным* числом параметров
**** независимая единица выполнения в составе программы, запускается сразу после своего создания, для этого она должна получить на вход вызываемый объект, задающий алгоритм, который должен быть выполнен в потоке. Вызываемый алгоритм может быть
***** именованная функция
***** функциональный объект
***** лямбда-функция
**** Состояния потока
***** присоединяемое - над потоком не выполнялись операции ~join~ или ~detach~
****** если в момент вызова деструктора объект-поток находится в присоединяемом состоянии, деструктор вызывает функцию ~std::terminate~, которая приводит к аварийному завершению программы.
***** отсоединяемое - над потоком выполнена операция ~detach~ поток в отсоединяемом состоянии - *поток-демон*
*** Данные в совместном доступе
**** Двоичные семафоры (мьютексы - mut-ual ex-clusion) запирает и открывает критическую секцию кода, внутри которой происходит работа с общей переменной
***** виды
****** рекурсивная блокировка
****** с запросом состояния блокировки
****** с ограничением времени ожидания
****** без ограничения времени ожидания
****** с одновременным исполнением нескольких потоков внутри критической секции
**** Блокировщики - объект-обертка для мьютекса, реализующий RAII - время запирания мьютекса ограничивается временем жизни блокировщика
***** классы
****** ~std::lock_guard~
****** ~std::scoped_lock~
****** ~std::unique_lock~
****** ~std::shared_lock~
**** Потокобезопасная инициализация - для данных, используемых только для чтения
***** константные выражения
***** статические переменные, видимые в определенном блоке
***** ~std::call_once~ вместе с флагом ~std::once_flag~
*** Переменные условия
*** Задания
** С++ 14 (2014)
*** Блокировщики чтения-записи
* В стандартной библиотеке C++ 17 появились параллельные алгоритмы.Теперь большинство алгоритмов из стандартной библиотеки можно выполнять последовательным, параллельным или векторизированным образом.
** С++ 17 (2017)
*** Поддержка параллельных вычислений в стандартных алгоритмах
* В стандарт C++ 20 вошли сопрограммы, а в будущем стандарте C++ 23 можно ожидать поддержку транзакционной памяти, расширенные фьючерсы и другое.
** С++ 20 (2020)
*** Атомарные умные указатели
*** Потоки с ожиданием ~std::jthread~ - joinable - ожидает завершение потока в деструкторе и поддерживает *кооперативное прерывание*
*** Защелки
*** Барьеры
*** Семафоры общего вида
*** Сопрограммы (coroutine)
** C++ 23 (2023)
*** Исполнител
*** Расширения класса ~std::future~
*** Транзакционная память
*** Блоки заданий
*** Векторы с параллельной обработкой
